/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mg.manga.window;

import java.awt.Image;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultCaret;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author rinelfi
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    private Map<String, String> configuration;
    private boolean download = false;
    private long writedBytes = 0L;
    private String lastLocation = System.getProperty("user.home");

    public Main() {
        initComponents();
        this.initAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        projectName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        saveLocation = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        browseLocation = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        linkFormat = new javax.swing.JTextField();
        startDownload = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        terminal = new javax.swing.JTextArea();
        chapterStart = new javax.swing.JTextField();
        pageStart = new javax.swing.JTextField();
        newProject = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        averageLab = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Manga downloader");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Nom du projet");

        projectName.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        projectName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                projectNameFocusLost(evt);
            }
        });

        jLabel2.setText("Chapitre à capturer");

        jLabel3.setText("Page à capturer");

        saveLocation.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        saveLocation.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                saveLocationFocusLost(evt);
            }
        });

        jLabel4.setText("Dssier de sauvegarde");

        browseLocation.setText("Parcourir...");
        browseLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseLocationActionPerformed(evt);
            }
        });

        jLabel5.setText("Format du lien de téléchargement");

        linkFormat.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        linkFormat.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                linkFormatFocusLost(evt);
            }
        });

        startDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDownloadActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tableau de bord", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Courier New", 1, 13))); // NOI18N

        terminal.setEditable(false);
        terminal.setBackground(new java.awt.Color(102, 102, 102));
        terminal.setColumns(20);
        terminal.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        terminal.setForeground(new java.awt.Color(255, 255, 255));
        terminal.setRows(5);
        terminal.setFocusable(false);
        jScrollPane2.setViewportView(terminal);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        chapterStart.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        chapterStart.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        chapterStart.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                chapterStartFocusLost(evt);
            }
        });

        pageStart.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pageStart.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pageStart.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pageStartFocusLost(evt);
            }
        });

        newProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProjectActionPerformed(evt);
            }
        });

        averageLab.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        averageLab.setText("0.0 o/s");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(newProject, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(projectName)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(saveLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                                    .addComponent(chapterStart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pageStart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseLocation))
                            .addComponent(linkFormat))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(averageLab, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {chapterStart, pageStart});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4, jLabel5});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(projectName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(chapterStart, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(pageStart, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(saveLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseLocation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(linkFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(newProject, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(averageLab))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {newProject, startDownload});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {averageLab, jProgressBar1});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

  private void browseLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseLocationActionPerformed
      JFileChooser chooser = new JFileChooser();
      chooser.setCurrentDirectory(new File(lastLocation));
      chooser.setDialogTitle("Dossier de déstination");
      chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int selection = chooser.showDialog(jPanel1, "Ouvrir");
      if (selection == JFileChooser.APPROVE_OPTION) {
          File selectedFile = chooser.getSelectedFile();
          lastLocation = selectedFile.isDirectory() ? selectedFile.getPath(): selectedFile.getParent();
          saveLocation.setText(selectedFile.getAbsolutePath());
          this.configuration.put("saveLocation", selectedFile.getAbsolutePath());
      }
  }//GEN-LAST:event_browseLocationActionPerformed

  private void saveLocationFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_saveLocationFocusLost
      File selectedFile = new File(saveLocation.getText());
      if (!selectedFile.isDirectory() && !saveLocation.getText().equals("")) {
          JOptionPane.showMessageDialog(jPanel1, "Le dossier indiqué n'existe pas", "Dossier invalide", JOptionPane.ERROR_MESSAGE);
          saveLocation.setText("");
      } else if (!saveLocation.getText().equals("")) {
          this.configuration.put("saveLocation", selectedFile.getAbsolutePath());
          String next = saveLocation.getText().charAt(saveLocation.getText().length() - 1) == File.separatorChar ? saveLocation.getText().substring(0, saveLocation.getText().length() - 1) : saveLocation.getText();
          saveLocation.setText(next);
      } else {
          if (this.configuration.containsKey("saveLocation")) {
              this.configuration.remove("saveLocation");
          }
      }
  }//GEN-LAST:event_saveLocationFocusLost

  private void chapterStartFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chapterStartFocusLost
      if (chapterStart.getText().equals("") || !StringUtils.isNumeric(chapterStart.getText())) {
          chapterStart.setText("");
          if (this.configuration.containsKey("chapter")) {
              this.configuration.remove("chapter");
          }
      } else {
          this.configuration.put("chapter", chapterStart.getText());
      }
  }//GEN-LAST:event_chapterStartFocusLost

  private void pageStartFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pageStartFocusLost
      if (pageStart.getText().equals("") || !StringUtils.isNumeric(pageStart.getText())) {
          pageStart.setText("");
          if (this.configuration.containsKey("page")) {
              this.configuration.remove("page");
          }
      } else {
          this.configuration.put("page", pageStart.getText());
      }
  }//GEN-LAST:event_pageStartFocusLost

  private void linkFormatFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_linkFormatFocusLost
      if (linkFormat.getText().equals("")) {
          linkFormat.setText("");
          if (this.configuration.containsKey("linkFormat")) {
              this.configuration.remove("linkFormat");
          }
      } else {
          linkFormat.setText(formatLink(linkFormat.getText()));
          this.configuration.put("linkFormat", linkFormat.getText());
      }
  }//GEN-LAST:event_linkFormatFocusLost

  private void startDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startDownloadActionPerformed
      download = false;
      if (errorExist(this.configuration) == null) {
          download = true;
          this.terminalAddln("Lancement du projet ...");
          this.terminalAddln("Nom de projet : " + configuration.get("projectName"));
          saveLocation.setEnabled(false);
          projectName.setEnabled(false);
          new Thread(() -> {
              createDirs(configuration);
              treat(configuration);
              getAverage();
              processing(configuration);
              while (download) {
                  try {
                      Thread.sleep(10);
                  } catch (InterruptedException ex) {
                      terminalAddln(ex.getMessage());
                  }
              }
              JOptionPane.showMessageDialog(jPanel1, "Le téléchargement est terminé", "TéléchargementSuccès", JOptionPane.INFORMATION_MESSAGE);
              averageLab.setText("0.0 o/s");
              jProgressBar1.setValue(0);
          }).start();
      } else {
          JOptionPane.showMessageDialog(jPanel1, "Veuillez verifier les éléments suivants : \n" + errorExist(configuration), "Erreur de téléchargement", JOptionPane.ERROR_MESSAGE);
      }
  }//GEN-LAST:event_startDownloadActionPerformed

  private void projectNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_projectNameFocusLost
      if (projectName.getText().equals("")) {
          projectName.setText("");
          if (this.configuration.containsKey("projectName")) {
              this.configuration.remove("projectName");
          }
      } else {
          this.configuration.put("projectName", projectName.getText().toLowerCase());
          projectName.setText(projectName.getText().toLowerCase());
      }
  }//GEN-LAST:event_projectNameFocusLost

  private void newProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProjectActionPerformed
      this.initAll();
  }//GEN-LAST:event_newProjectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
      * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel averageLab;
    private javax.swing.JButton browseLocation;
    private javax.swing.JTextField chapterStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField linkFormat;
    private javax.swing.JButton newProject;
    private javax.swing.JTextField pageStart;
    private javax.swing.JTextField projectName;
    private javax.swing.JTextField saveLocation;
    private javax.swing.JButton startDownload;
    private javax.swing.JTextArea terminal;
    // End of variables declaration//GEN-END:variables

    private String errorExist(Map<String, String> configuration) {
        String output = "";
        if (!configuration.containsKey("projectName")) {
            output += " - Nom de projet\n";
        }
        if (!configuration.containsKey("chapter")) {
            output += " - Début du chapitre à capturer\n";
        }
        if (!configuration.containsKey("page")) {
            output += " - Début de la page à capturer\n";
        }
        if (!configuration.containsKey("saveLocation")) {
            output += " - Dossier d'enregistrement\n";
        }
        if (!configuration.containsKey("linkFormat")) {
            output += " - Format du lien";
        }
        return output.length() > 0 ? output : null;
    }
    
    private void terminalAddln(String text) {
        this.terminal.setText(this.terminal.getText() + text + "\n");
    }
    
    private void terminalAdd(String text) {
        this.terminal.setText(this.terminal.getText() + text);
    }
    
    boolean fileExist(String URLName) {
        try {
            HttpURLConnection.setFollowRedirects(false);
            // note : you may also need
            //        HttpURLConnection.setInstanceFollowRedirects(false)
            HttpURLConnection con = (HttpURLConnection) (new URL(URLName)).openConnection();
            // con.setRequestMethod("HEAD");
            con.addRequestProperty("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36");
            return (con.getResponseCode() == HttpURLConnection.HTTP_OK);
        } catch (IOException e) {
            this.terminalAddln(e.getMessage());
            return false;
        }
    }
    
    private int getFileSize(String link) {
        URLConnection connection = null;
        try {
            connection = (new URL(link)).openConnection();
            connection.addRequestProperty("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36");
            if (connection instanceof HttpURLConnection) {
                ((HttpURLConnection) connection).setRequestMethod("GET");
            }
            connection.getInputStream();
            return connection.getContentLength();
        } catch (IOException ex) {
            this.terminalAddln(ex.getMessage());
        } finally {
            if (connection instanceof HttpURLConnection) {
                ((HttpURLConnection) connection).disconnect();
            }
        }
        return 0;
    }
    
    private void createDirs(Map<String, String> config) {
        terminalAddln("Initialisation du projet...");
        terminalAddln("création du dossier \"" + config.get("projectName") + "\"");
        config.put("absoluteSaveLocation", config.get("saveLocation") + File.separatorChar + config.get("projectName"));
        File project = new File(config.get("absoluteSaveLocation"));
        if (!project.isDirectory() || !project.exists()) {
            if (project.mkdirs()) {
                terminalAddln("Dossier \"" + config.get("projectName") + "\" créé");
                terminalAddln("Localisation du projet dans : " + project.getAbsolutePath());
            } else {
                terminalAddln("Une erreur est survénue à la création du dossier \"" + config.get("projectName"));
            }
        } else {
            terminalAddln("Dossier \"" + config.get("projectName") + "\" éxiste déjà. Poursuite du traitement...");
        }
    }
    
    private void treat(Map<String, String> config) {
        int chapterLength = 0, pageLength = 0;
        String link = config.get("linkFormat");
        link = link.replaceAll("( )", "%20");
        chapterLength = StringUtils.isNumeric(String.valueOf(link.charAt(link.indexOf("{{chapitre}}") - 2))) ? Integer.valueOf(String.valueOf(link.charAt(link.indexOf("{{chapitre}}") - 2))) : 0;
        pageLength = StringUtils.isNumeric(String.valueOf(link.charAt(link.indexOf("{{page}}") - 2))) ? Integer.valueOf(String.valueOf(link.charAt(link.indexOf("{{page}}") - 2))) : 0;
        String tmp = new String();
        for (int i = 0; i < chapterLength; i++) {
            tmp += "0";
        }
        config.put("chapterPrefix", tmp);
        tmp = new String();
        for (int i = 0; i < pageLength; i++) {
            tmp += "0";
        }
        config.put("pagePrefix", tmp);
    }
    
    private String download(Map<String, String> config) {
        // Page and chapter formatter
        String page, pageSubed, nextPage, nextPageSubed, chapter, chapterSubed, nextChapter, nextChapterSubed, firstPageSubed, extension = null;
        int pagePrefix, chapterPrefix;
        
        pagePrefix = config.get("pagePrefix").length() + 1;
        chapterPrefix = config.get("chapterPrefix").length() + 1;
        
        page = config.get("page");
        pageSubed = pagePrefix > 1 ? (config.get("pagePrefix") + page).substring((config.get("pagePrefix") + page).length() - pagePrefix) : page;
        
        nextPage = String.valueOf(Integer.valueOf(page) + 1);
        nextPageSubed = pagePrefix > 1 ? (config.get("pagePrefix") + nextPage).substring((config.get("pagePrefix") + nextPage).length() - pagePrefix) : nextPage;
        
        chapter = config.get("chapter");
        chapterSubed = chapterPrefix > 1 ? (config.get("chapterPrefix") + chapter).substring((config.get("chapterPrefix") + chapter).length() - chapterPrefix) : chapter;
        
        nextChapter = String.valueOf(Integer.valueOf(chapter) + 1);
        nextChapterSubed = chapterPrefix > 1 ? (config.get("chapterPrefix") + nextChapter).substring((config.get("chapterPrefix") + nextChapter).length() - chapterPrefix) : nextChapter;
        
        firstPageSubed = (config.get("pagePrefix") + 1).substring((config.get("pagePrefix") + 1).length() - pagePrefix);

        // Link formatter
        String link, chapterPattern, chapterOutput, pagePattern, pageOutput;
        link = config.get("linkFormat");
        link = link.replaceAll("( )", "%20");
        chapterPattern = "(\\[[0-9]{0,1}\\]){0,1}\\{\\{chapitre\\}\\}";
        pagePattern = "(\\[[0-9]{0,1}\\]){0,1}\\{\\{page\\}\\}";
        pageOutput = link.replaceAll(pagePattern, pageSubed);
        chapterOutput = pageOutput.replaceAll(chapterPattern, chapterSubed);
        link = chapterOutput.replaceAll("extension", config.get("fileExtension"));

        // Stream manager
        BufferedInputStream bis = null;
        BufferedOutputStream bos = null;
        HttpURLConnection openConnection = null;
        // input buffer length
        final int ibl = 4096;
        // output buffer length
        int obl = 0;
        byte[] buffer = new byte[ibl];

        // is file exists on server
        if (!fileExist(link)) {
            terminalAddln("[" + page + "." + config.get("fileExtension") + "] n'existe pas");
            download = false;
            return null;
        }
        
        try {
            URL url = new URL(link);
            openConnection = (HttpURLConnection) url.openConnection();
            if (openConnection instanceof HttpURLConnection) {
                openConnection.setRequestMethod("GET");
                openConnection.setRequestProperty("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36");
            }
            if (!(openConnection.getResponseCode() == HttpURLConnection.HTTP_OK)) {
                terminalAddln("Impossible de se connecter au serveur : " + link);
                terminalAddln("Réponse du serveur : " + openConnection.getRequestMethod());
                return null;
            }
            bis = new BufferedInputStream(new DataInputStream(openConnection.getInputStream()));
            if (!(new File(config.get("absoluteSaveLocation") + File.separatorChar + chapter).isDirectory())) {
                terminalAdd("Création du dossier [" + chapter + "]");
                (new File(config.get("absoluteSaveLocation") + File.separatorChar + chapter)).mkdirs();
                terminalAddln(" : Succès!");
            }
            File fichier = new File(config.get("absoluteSaveLocation") + File.separatorChar + chapterSubed + File.separatorChar + pageSubed + "." + config.get("fileExtension"));
            bos = new BufferedOutputStream(new DataOutputStream(new FileOutputStream(fichier)));
            int filesize = getFileSize(link);
            terminalAddln("Chapitre " + chapterSubed + " - " + pageSubed + "." + config.get("fileExtension") + " " + this.dinamycSize(filesize));
            // currentFile.setText("Chapitre " + chapterSubed + " - " +pageSubed + "." + config.get("fileExtension"));
            // downloadedSize.setText("0 o/" + dinamycSize(filesize));
            long currentLength = 0;
            setTitle(config.get("projectName") + " - Chapitre " + chapterSubed + "[" + pageSubed + "] Manga downoader");
            while ((obl = bis.read(buffer, 0, ibl)) > -1) {
                bos.write(buffer, 0, obl);
                bos.flush();
                buffer = new byte[ibl];
                currentLength += obl;
                writedBytes += obl;
                jProgressBar1.setValue(convertPercentage(currentLength, filesize));
                // downloadedSize.setText(dinamycSize(currentLength) + "/" + dinamycSize(filesize));
            }
        } catch (IOException ex) {
            this.terminalAddln("");
            this.terminalAddln(ex.getMessage());
            JOptionPane.showMessageDialog(jPanel1, ex, "Erreur de flux", JOptionPane.ERROR_MESSAGE);
            download = false;
            return null;
        } finally {
            try {
                if (bos != null) {
                    bos.close();
                }
                if (bis != null) {
                    bis.close();
                }
                if (openConnection instanceof HttpURLConnection) {
                    openConnection.disconnect();
                }
            } catch (IOException ex) {
                this.terminalAddln("");
                this.terminalAddln(ex.getMessage());
            }
        }

        // Continuation
        String newPage, newPageOtherExtension, newChapter, newChapterOtherExtension;

        // new page
        link = config.get("linkFormat");
        link = link.replaceAll("( )", "%20");
        chapterPattern = "(\\[[0-9]{0,1}\\]){0,1}\\{\\{chapitre\\}\\}";
        pagePattern = "(\\[[0-9]{0,1}\\]){0,1}\\{\\{page\\}\\}";
        pageOutput = link.replaceAll(pagePattern, nextPageSubed);
        chapterOutput = pageOutput.replaceAll(chapterPattern, chapterSubed);
        newPage = chapterOutput.replaceAll("extension", config.get("fileExtension"));

        // new page other extension
        link = config.get("linkFormat");
        link = link.replaceAll("( )", "%20");
        chapterPattern = "(\\[[0-9]{0,1}\\]){0,1}\\{\\{chapitre\\}\\}";
        pagePattern = "(\\[[0-9]{0,1}\\]){0,1}\\{\\{page\\}\\}";
        pageOutput = link.replaceAll(pagePattern, nextPageSubed);
        chapterOutput = pageOutput.replaceAll(chapterPattern, chapterSubed);
        newPageOtherExtension = chapterOutput.replaceAll("extension", config.get("otherExtension"));

        // new chapter
        link = config.get("linkFormat");
        link = link.replaceAll("( )", "%20");
        chapterPattern = "(\\[[0-9]{0,1}\\]){0,1}\\{\\{chapitre\\}\\}";
        pagePattern = "(\\[[0-9]{0,1}\\]){0,1}\\{\\{page\\}\\}";
        pageOutput = link.replaceAll(pagePattern, firstPageSubed);
        chapterOutput = pageOutput.replaceAll(chapterPattern, nextChapterSubed);
        newChapter = chapterOutput.replaceAll("extension", config.get("fileExtension"));

        // new chapter other extension
        link = config.get("linkFormat");
        link = link.replaceAll("( )", "%20");
        chapterPattern = "(\\[[0-9]{0,1}\\]){0,1}\\{\\{chapitre\\}\\}";
        pagePattern = "(\\[[0-9]{0,1}\\]){0,1}\\{\\{page\\}\\}";
        pageOutput = link.replaceAll(pagePattern, firstPageSubed);
        chapterOutput = pageOutput.replaceAll(chapterPattern, nextChapterSubed);
        newChapterOtherExtension = chapterOutput.replaceAll("extension", config.get("otherExtension"));
        
        if (fileExist(newPage)) {
            config.put("page", nextPage);
            pageStart.setText(nextPage);
            extension = config.get("fileExtension");
        } else if (fileExist(newPageOtherExtension)) {
            config.put("page", nextPage);
            pageStart.setText(nextPage);
            extension = String.valueOf(config.get("otherExtension"));
        } else if (fileExist(newChapter)) {
            config.put("chapter", nextChapter);
            config.put("page", "1");
            chapterStart.setText(nextChapter);
            pageStart.setText("1");
            extension = String.valueOf(config.get("fileExtension"));
        } else if (fileExist(newChapterOtherExtension)) {
            config.put("chapter", nextChapter);
            config.put("page", "1");
            chapterStart.setText(nextChapter);
            pageStart.setText("1");
            extension = String.valueOf(config.get("otherExtension"));
        } else {
            download = false;
            extension = null;
        }
        return extension;
    }
    
    private String getFileExtension(Map<String, String> config) {
        String page, pageSubed, chapter, chapterSubed;
        int pagePrefix, chapterPrefix;
        
        pagePrefix = config.get("pagePrefix").length() + 1;
        chapterPrefix = config.get("chapterPrefix").length() + 1;
        
        page = config.get("page");
        pageSubed = pagePrefix > 1 ? (config.get("pagePrefix") + page).substring((config.get("pagePrefix") + page).length() - pagePrefix) : page;
        
        chapter = config.get("chapter");
        chapterSubed = chapterPrefix > 1 ? (config.get("chapterPrefix") + chapter).substring((config.get("chapterPrefix") + chapter).length() - chapterPrefix) : chapter;
        
        String link, chapterPattern, chapterOutput, pagePattern, pageOutput;
        link = config.get("linkFormat");
        link = link.replaceAll("( )", "%20");
        chapterPattern = "(\\[[0-9]{0,1}\\]){0,1}\\{\\{chapitre\\}\\}";
        pagePattern = "(\\[[0-9]{0,1}\\]){0,1}\\{\\{page\\}\\}";
        pageOutput = link.replaceAll(pagePattern, pageSubed);
        chapterOutput = pageOutput.replaceAll(chapterPattern, chapterSubed);
        if (fileExist(chapterOutput.replaceAll("extension", "png"))) {
            return "png";
        } else if (fileExist(chapterOutput.replaceAll("extension", "jpg"))) {
            return "jpg";
        }
        terminalAddln("Impossible de récupérer une éxtension du fichier...");
        return null;
    }
    
    private void processing(Map<String, String> config) {
        String fileExtension = getFileExtension(config);
        while (fileExtension != null && download) {
            if (fileExtension.equals("png")) {
                config.put("fileExtension", "png");
                config.put("otherExtension", "jpg");
                fileExtension = download(config);
            } else if (fileExtension.equals("jpg")) {
                config.put("fileExtension", "jpg");
                config.put("otherExtension", "png");
                fileExtension = download(config);
            }
        }
    }
    
    private String dinamycSize(long size) {
        if (size >= 1024 * 1024 * 1024) {
            return String.format("%7.1f Go", ((float) size / 1024.0 / 1024.0 / 1024.0));
        } else if (size >= 1024 * 1024) {
            return String.format("%7.1f Mo", ((float) size / 1024.0 / 1024.0));
        } else if (size >= 1024) {
            return String.format("%7.1f Ko", ((float) size / 1024.0));
        } else if (size < 1024) {
            return size + " o";
        }
        return null;
    }
    
    private int scaleByHeight(int oldHeight, int newHeight) {
        return newHeight * 100 / oldHeight;
    }
    
    private int scaleByWidth(int oldWidth, int newWidth) {
        return newWidth * 100 / oldWidth;
    }
    
    private int convertPercentage(long value, long totale) {
        return (int) (value * 100 / totale);
    }
    
    private void initAll() {
        setTitle("Manga downloader");
        this.configuration = new HashMap<>();
        download = false;
        writedBytes = 0L;
        DefaultCaret caret = (DefaultCaret) terminal.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        ImageIcon icon = new ImageIcon(this.getClass().getResource("/mg/manga/images/idea.png"));
        Image image = icon.getImage();
        image = image.getScaledInstance(35, 35, Image.SCALE_REPLICATE);
        icon = new ImageIcon(image);
        newProject.setIcon(icon);
        icon = new ImageIcon(this.getClass().getResource("/mg/manga/images/download.png"));
        image = icon.getImage();
        image = image.getScaledInstance(35, 35, Image.SCALE_REPLICATE);
        icon = new ImageIcon(image);
        startDownload.setIcon(icon);
        startDownload.setEnabled(true);
        projectName.setText("");
        projectName.setEnabled(true);
        chapterStart.setText("");
        chapterStart.setEnabled(true);
        pageStart.setText("");
        pageStart.setEnabled(true);
        saveLocation.setText("");
        saveLocation.setEnabled(true);
        linkFormat.setText("");
        linkFormat.setEnabled(true);
        jProgressBar1.setValue(0);
        terminal.setText("");
    }
    
    private String formatLink(String link) {
        return link.replaceAll("( )", "%20");
    }
    
    private void getAverage() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                while (download) {
                    averageLab.setText(dinamycSize(writedBytes) + "/s");
                    writedBytes = 0L;
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }).start();
    }
}
